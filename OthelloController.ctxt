#BlueJ class context
comment0.target=OthelloController
comment0.text=\n\ Write\ a\ description\ of\ class\ OthelloLogic\ here.\n\ \n\ @author\ (your\ name)\ \n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=i
comment1.target=OthelloController(OthelloInterface)
comment1.text=\n\ Constructs\ an\ OthelloController\ with\ a\ standard\ side\ length\ of\ 8.\n\ \n\ @param\ i\ An\ OthelloInterface\ object\ through\ which\ the\ OthelloController\ can\ control\ the\ visuals\ with.\n
comment10.params=player\ x\ y
comment10.target=boolean\ nextToOpponent(int,\ int,\ int)
comment11.params=
comment11.target=void\ checkEnd()
comment11.text=\n\ Determines\ whether\ or\ not\ if\ the\ game\ has\ ended.\n\ \n\ Game\ will\ end\ when\ either\ there\ are\ no\ empty\ spaces\ left\ or\ if\ neither\n\ player\ can\ make\ a\ legitimate\ move\ in\ the\ empty\ spaces\ remaining.\n\ \n\ This\ method\ will\ shift\ the\ game\ into\ a\ "critical\ stage"\ when\ the\ number\ \n\ of\ empty\ spaces\ left\ on\ the\ board\ is\ less\ than\ the\ half\ of\ the\ initial\n\ number\ of\ empty\ spaces.\n\ \n\ In\ the\ critical\ stage,\ every\ time\ a\ move\ has\ been\ made,\ the\ method\ will\n\ check\ to\ see\ if\ either\ player\ still\ has\ legitimate\ moves\ remaining.\n\ If\ both\ players\ have\ legitimate\ moves\ remaining,\ nothing\ is\ done.\n\ If\ only\ one\ player\ has\ legitimate\ moves\ remaining,\ it\ becomes\ the\ "currentPlayer_"\n\ If\ no\ players\ have\ legitimate\ moves\ remaining,\ the\ game\ is\ ended.\n
comment12.params=player
comment12.target=boolean\ canStillPlay(int)
comment12.text=\n\ Determines\ if\ the\ player\ in\ question\ still\ have\ any\ legitimate\ moves\ \n\ remaining.\n\ \n\ @param\ player\ Integer\ representing\ the\ player.\n\ @return\ True\ if\ the\ player\ still\ has\ additional\ possible\ moves.\n\ \ \ \ \ \ \ \ \ False\ if\ the\ player\ has\ no\ additional\ moves.\n
comment13.params=attacker\ x\ y\ xDif\ yDif
comment13.target=int[][]\ findChain(int,\ int,\ int,\ int,\ int)
comment13.text=\n\ Finds\ a\ chain\ of\ pieces\ that\ may\ be\ claimed\ in\ a\ certain\ direction\n\ Below\ is\ a\ guide\ to\ the\ directions\:\n\ \n\ North\:\ xDif\ \=\ 0,\ yDif\ \=\ -1;\n\ NorthEast\:\ xDif\ \=\ 1,\ yDif\ \=\ -1;\n\ East\:\ xDif\ \=\ 1,\ yDif\ \=\ 0;\n\ SouthEast\:\ xDif\ \=\ 1,\ yDif\ \=\ 1;\n\ South\:\ xDif\ \=\ 0,\ yDif\ \=\ 1;\n\ SouthWest\:\ xDif\ \=\ -1,\ yDif\ \=\ 1;\n\ West\:\ xDif\ \=\ -1,\ yDif\ \=\ 0;\n\ NorthWest\:\ xDif\ \=\ -1,\ yDif\ \=\ -1;\n\ \n\ @param\ attacker\ The\ integer\ representing\ the\ player\ attempting\ to\ make\ a\ play\n\ @param\ x\ The\ x\ coordinate\ of\ the\ starting\ piece\n\ @param\ y\ The\ y\ coordinate\ of\ the\ starting\ piece\n\ @param\ xDif\ The\ difference\ in\ x\ values\ in\ order\ to\ go\ a\ certain\ direction\n\ @param\ yDif\ The\ difference\ in\ y\ values\ in\ order\ to\ go\ a\ certain\ direction\n\ @return\ A\ 2D\ array\ containing\ all\ of\ the\ coordinates\ of\ pieces\ in\ the\ chain,\ if\ there\ is\ one\n\ \ \ \ \ \ \ \ \ Array\ of\ zero\ length\ is\ returned\ if\ no\ chain\ is\ found\n
comment14.params=attacker\ x\ y\ xDif\ yDif
comment14.target=boolean\ hasChain(int,\ int,\ int,\ int,\ int)
comment14.text=\n\ Founds\ out\ whether\ or\ not\ if\ there\ is\ a\ chain\ for\ the\ attacker\ to\n\ claim\ in\ a\ certain\ direction.\n\ Below\ is\ a\ guide\ to\ the\ directions\:\n\ \n\ North\:\ xDif\ \=\ 0,\ yDif\ \=\ -1;\n\ NorthEast\:\ xDif\ \=\ 1,\ yDif\ \=\ -1;\n\ East\:\ xDif\ \=\ 1,\ yDif\ \=\ 0;\n\ SouthEast\:\ xDif\ \=\ 1,\ yDif\ \=\ 1;\n\ South\:\ xDif\ \=\ 0,\ yDif\ \=\ 1;\n\ SouthWest\:\ xDif\ \=\ -1,\ yDif\ \=\ 1;\n\ West\:\ xDif\ \=\ -1,\ yDif\ \=\ 0;\n\ NorthWest\:\ xDif\ \=\ -1,\ yDif\ \=\ -1;\n\ \n\ @param\ attacker\ The\ integer\ representing\ the\ player\ attempting\ to\ make\ a\ play\n\ @param\ x\ The\ x\ coordinate\ of\ the\ starting\ piece\n\ @param\ y\ The\ y\ coordinate\ of\ the\ starting\ piece\n\ @param\ xDif\ The\ difference\ in\ x\ values\ in\ order\ to\ go\ a\ certain\ direction\n\ @param\ yDif\ The\ difference\ in\ y\ values\ in\ order\ to\ go\ a\ certain\ direction\n\ @return\ true\ if\ there\ is\ a\ chain,\ false\ otherwise\n
comment15.params=chain
comment15.target=void\ claimChainForCurrentPlayer(int[][])
comment15.text=\n\ Changes\ the\ pieces\ along\ a\ given\ chain\ to\ the\ "color"\ of\ the\ current\ player.\n\ \n\ @param\ chain\ The\ x\ and\ y\ values\ of\ all\ of\ the\ pieces\ within\ the\ desired\ chain.\n
comment16.params=x\ y
comment16.target=void\ claimSpaceForCurrentPlayer(int,\ int)
comment16.text=\n\ Changes\ the\ "color"\ of\ a\ single\ piece\ to\ that\ of\ the\ current\ player.\n\ \n\ Additionally,\ will\ call\ upon\ the\ screen\ to\ also\ make\ the\ appropriate\n\ changes.\ For\ example,\ if\ a\ piece\ was\ changed\ to\ 1,\ the\ screen\ must\ also\n\ change\ the\ color\ of\ that\ particular\ piece/space\ to\ the\ color\ representative\n\ of\ 1.\n\ \n\ Will\ also\ update\ the\ score\ accordingly.\n\ \n\ @param\ x\ The\ x\ coordinate\ of\ the\ space\n\ @param\ y\ The\ y\ coordinate\ of\ the\ space\n
comment17.params=x\ y
comment17.target=void\ changeScores(int,\ int)
comment17.text=\n\ Updates\ the\ score.\n\ \n\ In\ addition,\ this\ method\ will\ also\ call\ upon\ the\ interface\ to\ update\ the\n\ scores\ being\ visually\ displayed.\n\ \n\ This\ method\ will\ assume\ that\ the\ space\ described\ by\ the\ coordinates\n\ given\ is\ being\ claimed\ by\ the\ current\ player.\n\ Thus\ it\ will\ only\ make\ decisions\ based\ on\ the\ status\ of\ the\ said\ space\n\ prior\ to\ said\ claim.\n\ For\ example,\ if\ player\ one\ was\ claiming\ an\ empty\ space,\ this\ method\ will\n\ add\ one\ to\ player\ one's\ score\ and\ do\ nothing\ else.\ However,\ if\ the\ space\n\ being\ claimed\ had\ belonged\ to\ player\ two,\ this\ method\ will\ add\ one\ to\n\ player\ one's\ score\ and\ take\ one\ away\ from\ player\ two's.\n\ \n\ That\ being\ said,\ this\ method\ should\ not\ be\ called\ upon\ by\ itself,\ it\ is\n\ meant\ to\ only\ be\ used\ as\ a\ part\ of\ the\ "claimSpace"\ method.\n\ \n\ @param\ x\ The\ x\ coordinate\ of\ the\ space.\n\ @param\ y\ The\ y\ coordinate\ of\ the\ space.\n
comment18.params=i
comment18.target=void\ setInterface(OthelloInterface)
comment19.params=
comment19.target=void\ switchPlayers()
comment19.text=\n\ Switches\ the\ player\ currently\ in\ play.\n\ Switches\ to\ player\ 2\ if\ player\ 1\ is\ in\ play\ and\ vice\ versa.\n\ \n\ Also\ calls\ upon\ the\ interface\ to\ change\ the\ indicator\ displaying\ which\n\ player\ is\ the\ current\ player.\n\ \n
comment2.params=i\ sideLength
comment2.target=OthelloController(OthelloInterface,\ int)
comment20.params=
comment20.target=int\ getCurrentPlayer()
comment20.text=\n\ Gets\ the\ integer\ representing\ the\ player\ currently\ in\ play.\n\ \n\ @return\ Integer\ representing\ the\ current\ player.\n
comment21.params=
comment21.target=int[][]\ getBoard()
comment21.text=\n\ Gets\ the\ 2D\ array\ storing\ the\ data\ for\ the\ game\ board.\n\ \n\ @return\ 2D\ array\ representing\ the\ board.\n
comment22.params=
comment22.target=int\ getP1Score()
comment22.text=\n\ Gets\ the\ score\ of\ player\ 1.\n\ \n\ @return\ Player\ 1's\ score.\n
comment23.params=
comment23.target=int\ getP2Score()
comment23.text=\n\ Gets\ the\ score\ of\ player\ 2.\n\ \n\ @return\ Player\ 2's\ score.\n
comment24.params=
comment24.target=int\ getSideLength()
comment24.text=\n\ Returns\ the\ side\ length\ of\ the\ board,\ aka\ how\ many\ sqaces\ on\ each\ side\n\ Accounts\ for\ the\ buffer\ zone\ as\ well\n\ \n\ @return\ The\ board's\ side\ length\n
comment25.params=
comment25.target=int\ getEmptySpacesLeft()
comment26.params=
comment26.target=int\ getTotalMovesPossible()
comment27.params=
comment27.target=OthelloInterface\ getScreen()
comment28.params=
comment28.target=OthelloAI\ getAI()
comment29.params=
comment29.target=int\ getCurrentPlayerScore()
comment3.params=i\ sideLength\ aiFirst
comment3.target=OthelloController(OthelloInterface,\ int,\ boolean)
comment4.params=
comment4.target=void\ constructBoard()
comment4.text=\n\ Constructs\ the\ initial\ state\ of\ the\ game\ board.\n\ Initializes\ the\ "board"\ by\ creating\ the\ 2D\ array\ "board_"\n
comment5.params=
comment5.target=void\ initializeValues()
comment5.text=\n\ Initializes\ the\ values\ of\ several\ private\ fields.\n\ \n\ These\ are\ the\ fields\ initialized\:\n\ Sets\ currentPlayer_\ to\ 1\n\ Sets\ p1Score_\ to\ 2\n\ Sets\ p2Score_\ to\ 2\n\ Sets\ movesLeft_\ to\ the\ difference\ of\ the\ side\ length\ squared\ minus\ 4\n
comment6.params=target
comment6.target=void\ save(java.io.File)
comment7.params=target
comment7.target=void\ load(java.io.File)
comment8.params=x\ y
comment8.target=void\ playAt(int,\ int)
comment8.text=\n\ Determines\ what\ should\ happen\ when\ the\ current\ player\ makes\ an\ attempt\ to\n\ play\ at\ a\ certain\ space.\n\ \n\ Should\ be\ called\ upon\ by\ the\ interface\ whenever\ it\ detects\ an\ input\ from\n\ the\ user.\n\ \n\ Will\ determine\ if\ the\ play\ being\ attempted\ is\ a\ legitimate\ move\ or\ not.\n\ \n\ If\ the\ attempted\ play\ is\ legitimate,\ method\ will\ flip\ the\ appropriate\n\ pieces\ and\ change\ the\ current\ player.\ If\ play\ is\ illegitimate,\ nothing\ happens.\n\ \n\ In\ addition,\ invokes\ the\ ""\ method\ every\ time\ a\ \n\ legitimate\ play\ is\ made\ to\ see\ if\ the\ game\ should\ be\ ended\ or\ if\ a\ \n\ forced\ player\ change\ is\ necessary\ to\ keep\ the\ game\ going.\n\ \n\ Update\:\ This\ method\ will\ now\ also\ invoke\ the\ ai\ to\ make\ a\ move\ after\ the\ player\ \n\ has\ finished\ their\ move.\ \n\ \n\ @param\ x\n\ @param\ y\ \n
comment9.params=player\ x\ y
comment9.target=boolean\ canPlayAt(int,\ int,\ int)
numComments=30
